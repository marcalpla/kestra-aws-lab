AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Kestra Lab EC2 standalone template

Parameters:
  Name:
    Type: String
    Default: KestraLab

  CreateNetwork:
    Type: String
    AllowedValues:
      - "true"
      - "false"   

  ExistingSubnetId:
    Type: String
    Default: ""
  ExistingVpcId:
    Type: String
    Default: ""

  SshTunnelUser:
    Type: String
    Default: ""
  SshTunnelPassword:
    Type: String
    Default: ""
    NoEcho: true

  PrivateIpAddress1:
    Type: String
    Default: ""
    Description: Private IP address for the Kestra EC2 instance

  KeyPairName:
    Type: String
    Default: ""

  EbsVolumeId1:
    Type: String
    Default: ""
    Description: EBS Volume for Kestra storage
  EbsVolumeId2:
    Type: String
    Default: ""
    Description: EBS Volume for Mysql storage

  VaultToken:
    Type: String
    Default: ""
    NoEcho: true

  TagKey1:
    Type: String
    Default: ""
    Description: Tag key for all resources
  TagValue1:
    Type: String
    Default: ""
    Description: Tag value for all resources
  TagKey2:
    Type: String
    Default: ""
    Description: Tag key for all resources
  TagValue2:
    Type: String
    Default: ""
    Description: Tag value for all resources
  TagKey3:
    Type: String
    Default: ""
    Description: Tag key for EC2 instances
  TagValue3:
    Type: String
    Default: ""
    Description: Tag value for EC2 instances

  KestraImage:
    Type: String
    Default: kestra/kestra:latest-full    
  KestraImageRepositoryUser:
    Type: String
    Default: ""
  KestraImageRepositoryPassword:
    Type: String
    Default: ""
    NoEcho: true

  DatabaseUser:
    Type: String
    Default: kestra
  DatabasePassword:
    Type: String
    NoEcho: true

Conditions:
  ShouldCreateNetwork: !Equals [ !Ref CreateNetwork, "true" ]

  ShouldCreateSshTunnel: !And
    - !Not [ !Equals [ !Ref SshTunnelUser, "" ] ]
    - !Not [ !Equals [ !Ref SshTunnelPassword, "" ] ]

  PrivateIpAddress1Specified: !Not [ !Equals [ !Ref PrivateIpAddress1, "" ] ]

  KeyPairNameSpecified: !Not [ !Equals [ !Ref KeyPairName, "" ] ]

  EbsVolumeId1Specified: !Not [ !Equals [ !Ref EbsVolumeId1, "" ] ]
  EbsVolumeId2Specified: !Not [ !Equals [ !Ref EbsVolumeId2, "" ] ]

  Tag1Specified: !And 
    - !Not [ !Equals [ !Ref TagKey1, "" ] ]
    - !Not [ !Equals [ !Ref TagValue1, "" ] ]
  Tag2Specified: !And
    - !Not [ !Equals [ !Ref TagKey2, "" ] ]
    - !Not [ !Equals [ !Ref TagValue2, "" ] ]
  Tag3Specified: !And
    - !Not [ !Equals [ !Ref TagKey3, "" ] ]
    - !Not [ !Equals [ !Ref TagValue3, "" ] ]

  HasKestraImageRepositoryCredentials: !And
    - !Not [ !Equals [ !Ref KestraImageRepositoryUser, "" ] ]
    - !Not [ !Equals [ !Ref KestraImageRepositoryPassword, "" ] ]    

Resources:

  # Network

  VPC:
    Type: AWS::EC2::VPC
    Condition: ShouldCreateNetwork
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: ShouldCreateNetwork
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  InternetRoute:
    Type: AWS::EC2::Route
    Condition: ShouldCreateNetwork
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ShouldCreateNetwork
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetA:
    Type: AWS::EC2::Subnet
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${Name}A
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  # Security Group

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Name}
      VpcId: !If [ ShouldCreateNetwork, !Ref VPC, !Ref ExistingVpcId ]
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  SecurityGroupIngressMysql:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8081
      SourceSecurityGroupId: !If [ ShouldCreateSshTunnel, !Ref SecurityGroup, !Ref AWS::NoValue ]
      CidrIp: !If [ ShouldCreateSshTunnel, !Ref AWS::NoValue, 0.0.0.0/0 ]

  SecurityGroupIngressJmx:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 1099
      ToPort: 1099
      SourceSecurityGroupId: !If [ ShouldCreateSshTunnel, !Ref SecurityGroup, !Ref AWS::NoValue ]
      CidrIp: !If [ ShouldCreateSshTunnel, !Ref AWS::NoValue, 0.0.0.0/0 ]

  SecurityGroupIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !If [ ShouldCreateSshTunnel, !Ref SecurityGroup, !Ref AWS::NoValue ]
      CidrIp: !If [ ShouldCreateSshTunnel, !Ref AWS::NoValue, 0.0.0.0/0 ]          

  SecurityGroupIngressSshTunnel:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ShouldCreateSshTunnel
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 2222
      ToPort: 2222
      CidrIp: 0.0.0.0/0                 

  # Cloud Map

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ${Name}
      Vpc: !If [ ShouldCreateNetwork, !Ref VPC, !Ref ExistingVpcId ]
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  MysqlServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub ${Name}Mysql
      Description: Discover Mysql service
      NamespaceId: 
        Ref: CloudMapNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60        
      HealthCheckCustomConfig:
        FailureThreshold: 1    
      Tags:
        - Key: Name
          Value: !Sub ${Name}Mysql
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  # EC2

  KestraEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.large
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [ ShouldCreateNetwork, true, false ]
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
          PrivateIpAddress: !If [ PrivateIpAddress1Specified, !Ref PrivateIpAddress1, !Ref AWS::NoValue ]
      KeyName: !If [ KeyPairNameSpecified, !Ref KeyPairName, !Ref AWS::NoValue ]
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system packages
          yum update -y

          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker

          # Create a Docker network
          docker network create ${Name}

          # Download and run the Vault image if the token is present
          if [ "${VaultToken}" != "" ]; then
            docker run -d --name ${Name}Vault \
              --network ${Name} \
              -e VAULT_DEV_ROOT_TOKEN_ID=${VaultToken} \
              -e VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 \
              --restart unless-stopped \
              --log-driver=awslogs \
              --log-opt awslogs-region=${AWS::Region} \
              --log-opt awslogs-group=${KestraEC2LogGroup} \
              hashicorp/vault:latest server -dev
          fi

          # Create a directory for Kestra working directory
          KESTRA_WORKING_DIRECTORY_PATH=/tmp/kestra-wd
          mkdir -p $KESTRA_WORKING_DIRECTORY_PATH   

          # Create a directory for Kestra storage
          KESTRA_STORAGE_PATH=/app/storage
          mkdir -p $KESTRA_STORAGE_PATH

          # Define the Kestra startup script
          read -r -d '' KESTRA_INIT_SCRIPT << EOF
          KESTRA_INIT_SCRIPT_PLACEHOLDER
          EOF

          # Mount the EBS volume for Kestra storage if present
          if [ ! -z "${EbsVolumeId1}" ]; then
            DEVICE=$(readlink -f /dev/sdf)
            MOUNT_POINT=$KESTRA_STORAGE_PATH
            FS_TYPE=$(file -s $DEVICE | cut -d' ' -f2)
            if [ "$FS_TYPE" == "data" ]; then
              mkfs -t ext4 $DEVICE
            else
              KESTRA_INIT_SCRIPT="./kestra-ee server standalone --worker-thread=24"
            fi
            mount $DEVICE $MOUNT_POINT
            echo "$DEVICE $MOUNT_POINT ext4 defaults,nofail 0 2" >> /etc/fstab
          fi

          # Check if credentials are present
          if [ "${KestraImageRepositoryUser}" != "" ] && [ "${KestraImageRepositoryPassword}" != "" ]; then
            registry=$(echo "${KestraImage}" | cut -d'/' -f1)
            if [[ $registry == *"."* ]]; then
              echo "${KestraImageRepositoryPassword}" | docker login $registry -u ${KestraImageRepositoryUser} --password-stdin
            else
              echo "${KestraImageRepositoryPassword}" | docker login -u ${KestraImageRepositoryUser} --password-stdin
            fi
          fi

          # Define Kestra configuration
          read -r -d '' KESTRA_CONFIGURATION << EOF
          KESTRA_CONFIGURATION_PLACEHOLDER
          EOF

          # Download and run the Kestra image
          docker run -d --name ${Name} \
            --network ${Name} \
            --user root \
            -e KESTRA_CONFIGURATION="$KESTRA_CONFIGURATION" \
            -e JAVA_OPTS="-Xmx7g \
              -Dcom.sun.management.jmxremote \
              -Dcom.sun.management.jmxremote.port=1099 \
              -Dcom.sun.management.jmxremote.rmi.port=1099 \
              -Dcom.sun.management.jmxremote.ssl=false \
              -Dcom.sun.management.jmxremote.authenticate=false \
              -Djava.rmi.server.hostname=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)" \
            -v $KESTRA_STORAGE_PATH:/app/storage \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $KESTRA_WORKING_DIRECTORY_PATH:/tmp/kestra-wd \
            -p 1099:1099 \
            -p 8080:8080 \
            -p 8081:8081 \
            --restart unless-stopped \
            --log-driver=awslogs \
            --log-opt awslogs-region=${AWS::Region} \
            --log-opt awslogs-group=${KestraEC2LogGroup} \
            --entrypoint /bin/sh \
            ${KestraImage} \
            -c "$KESTRA_INIT_SCRIPT"
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue
        - !If
          - Tag3Specified
          - Key: !Ref TagKey3
            Value: !Ref TagValue3
          - !Ref AWS::NoValue

  MysqlEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: false      
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [ ShouldCreateNetwork, true, false ]
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
      KeyName: !If [ KeyPairNameSpecified, !Ref KeyPairName, !Ref AWS::NoValue ]
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system packages and ensure AWS CLI is installed
          yum update -y
          yum install -y aws-cli

          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker

          # Create a directory for Mysql storage
          MYSQL_DATA_PATH=/var/lib/mysql
          mkdir -p $MYSQL_DATA_PATH
          chown 1000:1000 $MYSQL_DATA_PATH

          # Mount the EBS volume for Mysql storage if present
          if [ ! -z "${EbsVolumeId2}" ]; then
            DEVICE=$(readlink -f /dev/sdf)
            MOUNT_POINT=$MYSQL_DATA_PATH
            FS_TYPE=$(file -s $DEVICE | cut -d' ' -f2)
            # If the volume is not formatted, format it and prepare it
            if [ "$FS_TYPE" == "data" ]; then
              mkfs -t ext4 $DEVICE
              mount $DEVICE $MOUNT_POINT
              rm -rf $MOUNT_POINT/lost+found
              chown 1000:1000 $MOUNT_POINT       
            else
              mount $DEVICE $MOUNT_POINT
            fi
            echo "$DEVICE $MOUNT_POINT ext4 defaults,nofail 0 2" >> /etc/fstab
          fi

          # Register the instance with the service discovery service
          aws servicediscovery register-instance --service-id ${MysqlServiceDiscoveryService} --instance-id $(curl http://169.254.169.254/latest/meta-data/instance-id) --attributes AWS_INSTANCE_IPV4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) --region ${AWS::Region}

          # Create a custom MySQL configuration file to allow function creation
          CUSTOM_MYSQL_CONFIG_PATH=/home/ec2-user
          CUSTOM_MYSQL_CONFIG_FILE=custom-mysql.cnf
          echo "[mysqld]
          log_bin_trust_function_creators=1
          sort_buffer_size=2M
          max_connections=280
          innodb_buffer_pool_size=2G
          innodb_log_file_size=512M
          innodb_flush_log_at_trx_commit=2
          thread_cache_size=8
          table_open_cache=2000
          innodb_file_per_table=1
          innodb_flush_method=O_DIRECT
          tmp_table_size=64M
          max_heap_table_size=64M" > $CUSTOM_MYSQL_CONFIG_PATH/$CUSTOM_MYSQL_CONFIG_FILE
          chown 1000:1000 $CUSTOM_MYSQL_CONFIG_PATH/$CUSTOM_MYSQL_CONFIG_FILE

          # Run Docker container for the Mysql server
          docker run -d --name ${Name}Mysql \
            -e MYSQL_RANDOM_ROOT_PASSWORD=yes \
            -e MYSQL_USER=${DatabaseUser} \
            -e MYSQL_PASSWORD=${DatabasePassword} \
            -e MYSQL_DATABASE=kestra \
            -v $MYSQL_DATA_PATH:/var/lib/mysql \
            -v $CUSTOM_MYSQL_CONFIG_PATH/$CUSTOM_MYSQL_CONFIG_FILE:/etc/mysql/conf.d/$CUSTOM_MYSQL_CONFIG_FILE:ro \
            -p 3306:3306 \
            --user 1000:1000 \
            --restart unless-stopped \
            --log-driver=awslogs \
            --log-opt awslogs-region=${AWS::Region} \
            --log-opt awslogs-group=${MysqlEC2LogGroup} \
            mysql:8.3
      Tags:
        - Key: Name
          Value: !Sub ${Name}Mysql
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue
        - !If
          - Tag3Specified
          - Key: !Ref TagKey3
            Value: !Ref TagValue3
          - !Ref AWS::NoValue

  SshEC2Instance:
    Type: AWS::EC2::Instance
    Condition: ShouldCreateSshTunnel
    Properties:
      InstanceType: t3.micro
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [ ShouldCreateNetwork, true, false ]
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
      # KeyName: !If [ KeyPairNameSpecified, !Ref KeyPairName, !Ref AWS::NoValue ]
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install Docker
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          
          # Run Docker container for the SSH server
          docker run -d --name ${Name}Ssh \
            -e DOCKER_MODS=linuxserver/mods:openssh-server-ssh-tunnel \
            -e PUID=1000 \
            -e PGID=1000 \
            -e TZ=Etc/UTC \
            -e PASSWORD_ACCESS=true \
            -e USER_NAME=${SshTunnelUser} \
            -e USER_PASSWORD=${SshTunnelPassword} \
            -p 2222:2222 \
            --restart unless-stopped \
            --log-driver=awslogs \
            --log-opt awslogs-region=${AWS::Region} \
            --log-opt awslogs-group=${SshEC2LogGroup} \
            linuxserver/openssh-server:latest
      Tags:
        - Key: Name
          Value: !Sub ${Name}Ssh
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue
        - !If
          - Tag3Specified
          - Key: !Ref TagKey3
            Value: !Ref TagValue3
          - !Ref AWS::NoValue

  # EBS Volumes attachment

  EbsVolumeAttachment1:
    Type: AWS::EC2::VolumeAttachment
    Condition: EbsVolumeId1Specified
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref KestraEC2Instance
      VolumeId: !Ref EbsVolumeId1

  EbsVolumeAttachment2:
    Type: AWS::EC2::VolumeAttachment
    Condition: EbsVolumeId2Specified
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref MysqlEC2Instance
      VolumeId: !Ref EbsVolumeId2

  # Logs
  
  KestraEC2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ec2/${Name}
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  MysqlEC2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ec2/${Name}Mysql
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub ${Name}Mysql
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  SshEC2LogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateSshTunnel
    Properties:
      LogGroupName: !Sub /ec2/${Name}Ssh
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub ${Name}Ssh
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue

  # Roles and Policies

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Name}EC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${Name}EC2ServiceDiscoveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - servicediscovery:*
                  - route53:CreateHealthCheck
                Resource: '*'
        - PolicyName: !Sub ${Name}EC2LogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ec2/${Name}*
        - PolicyName: !Sub ${Name}EC2SSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: '*'
        - PolicyName: !Sub ${Name}EC2EBSVolumePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:DescribeVolumes
                Resource: '*'
        - PolicyName: !Sub ${Name}EC2S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - S3:GetObject
                  - S3:PutObject
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${Name}EC2Role
        - !If
          - Tag1Specified
          - Key: !Ref TagKey1
            Value: !Ref TagValue1
          - !Ref AWS::NoValue
        - !If
          - Tag2Specified
          - Key: !Ref TagKey2
            Value: !Ref TagValue2
          - !Ref AWS::NoValue                
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

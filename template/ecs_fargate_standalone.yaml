AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Kestra Lab ECS Fargate standalone template

Parameters:
  Name:
    Type: String
    Default: KestraLab

  CreateNetwork:
    Type: String
    AllowedValues:
      - "true"
      - "false"   

  ExistingSubnetId:
    Type: String
    Default: ""
  ExistingVpcId:
    Type: String
    Default: ""

  SshTunnelUser:
    Type: String
    Default: ""
  SshTunnelPassword:
    Type: String
    Default: ""
    NoEcho: true

  VaultToken:
    Type: String
    NoEcho: true

  TagKey:
    Type: String
    Default: ""
  TagValue:
    Type: String
    Default: ""

  KestraImage:
    Type: String
    Default: kestra/kestra:latest-full    
  KestraImageRepositoryUser:
    Type: String
    Default: ""
  KestraImageRepositoryPassword:
    Type: String
    Default: ""
    NoEcho: true

  DatabaseUser:
    Type: String
    Default: kestra
  DatabasePassword:
    Type: String
    NoEcho: true

Conditions:
  ShouldCreateNetwork: !Equals [ !Ref CreateNetwork, "true" ]

  ShouldCreateSshTunnel: !And
    - !Not [ !Equals [ !Ref SshTunnelUser, "" ] ]
    - !Not [ !Equals [ !Ref SshTunnelPassword, "" ] ]
  
  TagSpecified: !And 
    - !Not [ !Equals [ !Ref TagKey, "" ] ]
    - !Not [ !Equals [ !Ref TagValue, "" ] ]

  HasKestraImageRepositoryCredentials: !And
    - !Not [ !Equals [ !Ref KestraImageRepositoryUser, "" ] ]
    - !Not [ !Equals [ !Ref KestraImageRepositoryPassword, "" ] ]    

Resources:

  # Network

  VPC:
    Type: AWS::EC2::VPC
    Condition: ShouldCreateNetwork
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: ShouldCreateNetwork
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  InternetRoute:
    Type: AWS::EC2::Route
    Condition: ShouldCreateNetwork
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ShouldCreateNetwork
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetA:
    Type: AWS::EC2::Subnet
    Condition: ShouldCreateNetwork
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${Name}A
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  # Security Group

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Name}
      VpcId: !If [ ShouldCreateNetwork, !Ref VPC, !Ref ExistingVpcId ]
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  SecurityGroupIngressPostgres:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupIngressNfs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8081
      SourceSecurityGroupId: !If [ ShouldCreateSshTunnel, !Ref SecurityGroup, !Ref AWS::NoValue ]
      CidrIp: !If [ ShouldCreateSshTunnel, !Ref AWS::NoValue, 0.0.0.0/0 ]

  SecurityGroupIngressSshTunnel:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ShouldCreateSshTunnel
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 2222
      ToPort: 2222
      CidrIp: 0.0.0.0/0                 

  # Cloud Map

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ${Name}
      Vpc: !If [ ShouldCreateNetwork, !Ref VPC, !Ref ExistingVpcId ]
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  PostgresServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub ${Name}Postgres
      Description: Discover PostgreSQL service
      NamespaceId: 
        Ref: CloudMapNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60        
      HealthCheckCustomConfig:
        FailureThreshold: 1    
      Tags:
        - Key: Name
          Value: !Sub ${Name}Postgres
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]        
  
  # ECS Cluster and EFS

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Name}
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemTags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  EfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
      SecurityGroups: 
        - !Ref SecurityGroup

  # ECS Task Definitions

  KestraImageRepositoryCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasKestraImageRepositoryCredentials
    Properties:
      Name: !Sub "${Name}ImageRepositoryCredentials"
      Description: "Kestra image repository credentials"
      SecretString: !Sub |
        {
          "username": "${KestraImageRepositoryUser}",
          "password": "${KestraImageRepositoryPassword}"
        }  
      Tags:
        - Key: Name
          Value: !Sub ${Name}ImageRepositoryCredentials
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  KestraTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Name}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4096
      Memory: 8GB
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole       
      ContainerDefinitions:
        - Name: !Sub ${Name}
          Image: !Ref KestraImage
          EntryPoint: ["/bin/sh", "-c"]
          Command: 
            - >
              KESTRA_INIT_SCRIPT_PLACEHOLDER
          RepositoryCredentials:
            CredentialsParameter: !If
              - HasKestraImageRepositoryCredentials
              - !Ref KestraImageRepositoryCredentialsSecret
              - !Ref AWS::NoValue
          PortMappings:
            - ContainerPort: 8080
          MountPoints:
            - ContainerPath: /app/storage
              SourceVolume: !Sub ${Name}
          Environment:
            - Name: KESTRA_CONFIGURATION
              Value: !Sub |
                KESTRA_CONFIGURATION_PLACEHOLDER
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref KestraServiceLogGroup
              awslogs-stream-prefix: ecs
        - Name: !Sub ${Name}Vault
          Image: hashicorp/vault:latest
          Environment:
            - Name: VAULT_DEV_ROOT_TOKEN_ID
              Value: !Ref VaultToken
            - Name: VAULT_DEV_LISTEN_ADDRESS
              Value: 0.0.0.0:8200
          Command: ["server", "-dev"]
          PortMappings:
            - ContainerPort: 8200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref KestraServiceLogGroup
              awslogs-stream-prefix: ecs              
      Volumes:
        - Name: !Sub ${Name}
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFileSystem
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  PostgresTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Name}Postgres
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4GB
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole    
      ContainerDefinitions:
        - Name: !Sub ${Name}Postgres
          Image: postgres:15.3
          PortMappings:
            - ContainerPort: 5432
          MountPoints:
            - ContainerPath: /var/lib/postgresql/data
              SourceVolume: !Sub ${Name}Postgres
          Environment:
            - Name: POSTGRES_DB
              Value: kestra
            - Name: POSTGRES_USER
              Value: !Ref DatabaseUser
            - Name: POSTGRES_PASSWORD
              Value: !Ref DatabasePassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref PostgresServiceLogGroup
              awslogs-stream-prefix: ecs
      Volumes:
        - Name: !Sub ${Name}Postgres
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFileSystem
      Tags:
        - Key: Name
          Value: !Sub ${Name}Postgres
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  SshTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: ShouldCreateSshTunnel
    Properties:
      Family: !Sub ${Name}Ssh
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole       
      ContainerDefinitions:
        - Name: !Sub ${Name}Ssh
          Image: linuxserver/openssh-server:latest
          PortMappings:
            - ContainerPort: 2222
          Environment:
            - Name: DOCKER_MODS
              Value: "linuxserver/mods:openssh-server-ssh-tunnel"           
            - Name: PUID
              Value: "1000"
            - Name: PGID
              Value: "1000"
            - Name: TZ
              Value: "Etc/UTC"
            - Name: PASSWORD_ACCESS
              Value: "true"
            - Name: USER_NAME
              Value: !Ref SshTunnelUser
            - Name: USER_PASSWORD
              Value: !Ref SshTunnelPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SshServiceLogGroup
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${Name}Ssh
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  # ECS Services

  KestraService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Name}
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref KestraTaskDefinition
      DesiredCount: 0 # Stop initially, increase to start
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [ ShouldCreateNetwork, ENABLED, DISABLED ]
          Subnets: 
            - !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
          SecurityGroups:
            - !Ref SecurityGroup
      SchedulingStrategy: REPLICA
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  PostgresService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Name}Postgres
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref PostgresTaskDefinition
      DesiredCount: 0 # Stop initially, increase to start
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [ ShouldCreateNetwork, ENABLED, DISABLED ]
          Subnets: 
            - !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
          SecurityGroups:
            - !Ref SecurityGroup
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt PostgresServiceDiscoveryService.Arn
      Tags:
        - Key: Name
          Value: !Sub ${Name}Postgres
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  SshService:
    Type: AWS::ECS::Service
    Condition: ShouldCreateSshTunnel
    Properties:
      ServiceName: !Sub ${Name}Ssh
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref SshTaskDefinition
      DesiredCount: 0 # Stop initially, increase to start
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [ ShouldCreateNetwork, ENABLED, DISABLED ]
          Subnets: 
            - !If [ ShouldCreateNetwork, !Ref SubnetA, !Ref ExistingSubnetId ]
          SecurityGroups:
            - !Ref SecurityGroup
      SchedulingStrategy: REPLICA    
      Tags:
        - Key: Name
          Value: !Sub ${Name}Ssh
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]   

  # Logs
  
  KestraServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${Name}
      Tags:
        - Key: Name
          Value: !Sub ${Name}
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]
  
  PostgresServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${Name}Postgres
      Tags:
        - Key: Name
          Value: !Sub ${Name}Postgres
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  SshServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateSshTunnel
    Properties:
      LogGroupName: !Sub /ecs/${Name}Ssh   
      Tags:
        - Key: Name
          Value: !Sub ${Name}Ssh
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]    

  # Roles and Policies

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Name}ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: !Sub ${Name}TaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              !If
                - HasKestraImageRepositoryCredentials
                - - Effect: "Allow"
                    Action:
                      - secretsmanager:GetSecretValue
                      - kms:Decrypt
                    Resource: !Ref KestraImageRepositoryCredentialsSecret
                  - Effect: "Allow"
                    Action:
                      - elasticfilesystem:ClientMount
                      - elasticfilesystem:ClientWrite
                      - elasticfilesystem:DescribeMountTargets
                      - elasticfilesystem:DescribeFileSystems
                    Resource: !GetAtt EfsFileSystem.Arn
                - - Effect: "Allow"
                    Action:
                      - elasticfilesystem:ClientMount
                      - elasticfilesystem:ClientWrite
                      - elasticfilesystem:DescribeMountTargets
                      - elasticfilesystem:DescribeFileSystems
                    Resource: !GetAtt EfsFileSystem.Arn
      Tags:
        - Key: Name
          Value: !Sub ${Name}ECSTaskExecutionRole
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Name}TaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"  
      Tags:
        - Key: Name
          Value: !Sub ${Name}TaskRole
        - Key: !If [ TagSpecified, !Ref TagKey, !Ref AWS::NoValue ]
          Value: !If [ TagSpecified, !Ref TagValue, !Ref AWS::NoValue ]  
